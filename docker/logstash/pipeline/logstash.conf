input {  
  file {
    path => "/logs/*.log"
  }
}

filter {
  if "_grokparsesuccess" not in [tags]{
    grok { 
      match => { "message" => "\A%{TIMESTAMP_ISO8601:isotimestamp}%{SPACE}%{LOGLEVEL:severity} %{DATA} --- \[%{DATA:thread}]%{SPACE}%{DATA:source}%{SPACE}: %{GREEDYDATA:content}" }
      remove_tag => ["_grokparsefailure"]
      add_tag => ["_grokparsesuccess"]
    }
  }
  
  if "_grokparsesuccess" not in [tags]{
    grok { 
      match => { "message" => "\A%{IPORHOST:clientip} %{USER:ident} %{USER:auth} \[%{HTTPDATE:accesstimestamp}\] \"(?:%{WORD:verb} %{NOTSPACE:request}(?: HTTP/%{NUMBER:httpversion})?|%{DATA:rawrequest})\" %{NUMBER:response} (?:%{NUMBER:bytes}|-) \(%{NUMBER:duration} ms\)" }
      remove_tag => ["_grokparsefailure"]
      add_tag => ["_grokparsesuccess"]
    }
  }

  date {
    match => [ "isotimestamp", "YYYY-MM-dd HH:mm:ss.SSS" ]
  } 
  date {
    match => [ "accesstimestamp", "dd/MMM/YYYY:HH:mm:ss Z" ]
  }
  
  mutate {
     convert => [ "response", "integer"]
     convert => [ "bytes", "integer"]
     convert => [ "duration", "integer"]
  }
}

output {
#  stdout { 
#    codec => rubydebug 
#  }  
  elasticsearch {
    hosts => "elasticsearch:9200"
  }
}